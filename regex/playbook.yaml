---
- hosts: localhost
  gather_facts: no        
  environment: "{{ proxy_environment | d({}) }}"

  vars:
    proxy_environment:
      http_proxy: http://emea.zscaler.philips.com:9480
      https_proxy: http://emea.zscaler.philips.com:9480
      no_proxy: localhost,127.0.0.1,artifactory-ehv.ta.philips.com,tfsemea1.ta.philips.com,.artifactory.pic.philips.com
    _nvidia_driver_download_dir: "/tmp/nvidia"
    nvidia_driver_offline_installation: false
    nvidia_driver_offline_installation_folder: ""
    nvidia_driver_passthrough_version: "440.64.00"
    nvidia_driver_grid_version: "450.51.05"
    nvidia_driver_kernel_package_version: "3.10.0-1127.19.1.el7.x86_64"
    nvidia_driver_passhtrough_installer_base_url: "https://artifactory-ehv.ta.philips.com/artifactory/icap-ai4rad-sandbox/nvidia/nvidia-passthrough-driver"
    nvidia_driver_grid_installer_base_url: "https://artifactory-ehv.ta.philips.com/artifactory/icap-ai4rad-nightly/nvidia-grid-driver"

  tasks:
    - name: breaking a loop
      command: >
        /bin/false
      register: loop_result
      with_items:
        - "un"
        - "deux"
        - "trois"
      when: loop_result is not defined or loop_result.rc != 0

    - name: check we can access env var
      debug:
        msg: "http_proxy: {{ proxy_environment.http_proxy }}"

    - name: Set installer filename
      set_fact:
        buildagent_location: "emea"

    - name: Create acceptable location list
      set_fact: 
        buildagent_acceptable_locations: "{{buildagent_acceptable_locations | default([]) + [item]}}" 
      with_items: 
        - emea
        - apac

    - name: Check that buildagent_location has a valid value
      assert:
        that: buildagent_location in buildagent_acceptable_locations
        fail_msg: "unsupported location: {{ buildagent_location }}"

    - name: Set installer filename
      set_fact:
        _nvidia_driver_installer_filename: "NVIDIA-Linux-x86_64-{{ nvidia_driver_passthrough_version }}.run"
    
    - debug:
        var: global_regcred_api_key 
    
    - name: Retrieve nvidia driver installation package
      get_url:
        url: "{{ nvidia_driver_passhtrough_installer_base_url }}/{{ nvidia_driver_passthrough_version }}/{{ _nvidia_driver_installer_filename }}"
        dest: "{{ _nvidia_driver_download_dir }}"
        validate_certs: no
        mode: 'u+x,g+x'
        headers: 
          X-JFrog-Art-Api: "{{ global_regcred_api_key }}"

    - name: get relative path
      set_fact:
        my_rel_path: "{{ '/etc/subdir/some_file.txt' | relpath('/etc') }}"

    - debug:
        var: my_rel_path 

    - name: construct path
      set_fact:
        my_path: "{{ ('some_dir', 'some_file.txt') | path_join }}"

    - debug:
        var: my_path 

    - name: get port with urlsplit
      set_fact:
        my_param: 200

    - set_fact:
        helm2_version_output: "&version.Version{SemVer:\"v2.10.0\", GitCommit:\"9ad53aac42165a5fadc6c87be0dea6b115f93090\", GitTreeState:\"clean\"}"

    - set_fact:
        helm2_client_version: "{{ helm2_version_output | regex_search('(Version|SemVer):\"v(\\d+)\\.(\\d+)\\.(\\d+)\"') | string | regex_search('v(\\d+)\\.(\\d+)\\.(\\d+)') }}"
      
    - debug: var=helm2_client_version
    
    - set_fact:
        helm3_version_output: "version.BuildInfo{Version:\"v3.2.4\", GitCommit:\"0ad800ef43d3b826f31a5ad8dfbb4fe05d143688\", GitTreeState:\"clean\", GoVersion:\"go1.13.12\"}"

    - set_fact:
        helm3_client_version: "{{ helm3_version_output | regex_search('(Version|SemVer):\"v(\\d+)\\.(\\d+)\\.(\\d+)\"') | string | regex_search('v(\\d+)\\.(\\d+)\\.(\\d+)') }}"
    
    - debug: var=helm3_client_version

    - assert:
        that: 
          - helm3_client_version is not defined or helm3_client_version is version('v3.0.0', '>=')
        fail_msg: "helm client present but version is less than 3."
        success_msg: "helm client not yet installed or already at least version 3"

    - set_fact:
        helm3_client_major_version: "{{ helm3_client_version | regex_search('v(\\d+)\\.') | string | regex_search('(\\d+)') }}"

    - debug: var=helm3_client_major_version

    - assert: 
        that:
          - helm3_client_major_version|int == 3
        fail_msg: "helm client is not version 3. Either removed existing helm client or upgrade to helm3"

    - name: get port with urlsplit
      set_fact:
        splitted_port: "{{ 'https://user:password@www.acme.com/dir/index.html?query=term#fragment' | urlsplit('port') }}"

    - debug: var=splitted_port

    - name: get all urlsplit results
      set_fact:
        splitted_url: "{{ 'https://user:password@www.acme.com/dir/index.html?query=term#fragment' | urlsplit }}"

    - debug: var=splitted_url

    - name: set docker_insecure_registries
      set_fact: 
        docker_insecure_registries:
          - '192.168.100.26:5000'

    - name: setting docker_options
      set_fact:
        docker_options: "{{ docker_insecure_registries | map('regex_replace', '^(.*)$', '--insecure-registry=\\1' ) | list | join(' ') }}"
        
    - debug: var=docker_options


